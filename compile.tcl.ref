#!/usr/bin/tclsh8.5
set ::exclude {
    parse-bison.c
    inpptree-parser.c
    dlmain.c
    cmexport.c
}
set object_files object_files
set target_name ramspice
if {[lsearch $argv -sp] != -1} {
    set target_name ramspice_sp
    set object_files object_files_sp
}
namespace eval ::templates:: {}
proc template {name arguments body} {
    proc ::templates::$name $arguments $body
}
proc c {} {
    return [clock format [clock seconds]]
}
source templates.tcl
if {![file exists /tmp/expanded]} {
    file mkdir /tmp/expanded
}
set O [open log w]
puts $O "#[clock format [clock seconds]]"
close $O
set O [open compile.tcsh w]
puts $O "#!/bin/tcsh"
puts $O "setenv PATH /opt/centos/devtoolset-1.0/root/usr/bin/:\$PATH"
set pre_c "/usr/bin/gcc -I. -lm -ltcl8.5  -g -O5 -Wall -Wextra -Wmissing-prototypes -Wstrict-prototypes -Wnested-externs -Wold-style-definition -Wredundant-decls -Wconversion -I/usr/include/c++/4.4.4/x86_64-redhat-linux -IBerkeleyDB.6.0/include -ldb-6.0  -Imaths/poly -Ifrontend -Ispicelib/devices -Ixspice/icm/analog -D SENSDEBUG -D X_DISPLAY_MISSING -D CIDER -D SIMULATOR -c"
set pre_cpp "/usr/bin/g++  -I. -lm -ltcl8.5  -g -O5 -Wall -Wextra -fpermissive -Wredundant-decls -Wconversion -IBerkeleyDB.6.0/include -Imaths/poly -Ifrontend -Ispicelib/devices -Ixspice/icm/analog -D X_DISPLAY_MISSING -D CIDER -D SIMULATOR -D HAVE_DECL_BASENAME -c"
puts "Info: Expanding templates"
array set mtimes {}
foreach path {. */ */*/ */*/*/ */*/*/*/} {
    foreach file [glob -nocomplain $path/*.h $path/*.c $path/*.cpp] {
        set filename [file tail $file]
        set fileext [file extension $file]
	set fileroot [file rootname $filename]
	set tmpdir [join [concat /tmp/expanded [lrange [split [file dirname [file normalize $file]] /] [llength [split [pwd] /]] end]] /]
	if {[string match test_* $filename]} continue
	if {![file exists $tmpdir]} {
	    file mkdir $tmpdir
	}
	set mtimes($tmpdir/$fileroot$fileext) [file mtime $file]
	set I [open $file r]
	set ::templates::O [open $tmpdir/$fileroot$fileext w]
	while {[gets $I line]>=0} {
	    if {[regexp {^\s*\#([a-z_]+)\s+} $line -> template_name]} {
	        if {[info procs ::templates::$template_name]!=""} {
		    regsub {\#} $line {::templates::} template_buffer
		    set bracket_rank [regexp -all {\{} $line]
		    incr bracket_rank -[regexp -all {\}} $line]
		    while {($bracket_rank)&&([gets $I line])} {
		        append template_buffer \n
		        append template_buffer $line
		        incr bracket_rank [regexp -all {\{} $line]
		        incr bracket_rank -[regexp -all {\}} $line]
		    }
		    eval $template_buffer
		    continue
		}
	    }
	    puts $::templates::O $line
	}
	close $::templates::O
	close $I
    }
}    
puts "Info: Creating compilation script [c]"
foreach path {/tmp/expanded /tmp/expanded/*/ /tmp/expanded/*/*/ /tmp/expanded/*/*/*/ /tmp/expanded/*/*/*/*/} {
    foreach file [glob -nocomplain $path/*.c $path/*.cpp] {
        set filename [file tail $file]
        set fileext [file extension $file]
	set fileroot [file rootname $filename]
	set tmpdir [join [concat /tmp/expanded [lrange [split [file dirname [file normalize $file]] /] [llength [split [pwd] /]] end]] /]
	if {[string match /tmp/expanded/bdb* $file]} continue
	if {[string match test_* $filename]} continue
	if {[lsearch $argv $filename]==-1} {
        	if {[lsearch $::exclude $filename]!=-1} {
        	    puts "Info: skipping $file [c]"
        	    if {[file exists $object_files/$fileroot.o]} {
		        puts "Info: deleting $fileroot.o [c]"
        	        file delete $object_files/$fileroot.o
        	    }
        	    continue
        	}    
        	if {([file exists $object_files/$fileroot.o])&&([info exists mtimes($file)])} {
        	    if {[file mtime $object_files/$fileroot.o]>=$mtimes($file)} {
        	        continue
        	    }
        	}
	}
	puts $O "echo \"Info: compiling $file\""
	switch $fileext {
	    .c {
	        puts $O "$pre_c $file | & tee -a log"
		puts $O "mv $fileroot.o $object_files"
	    }
	    .cpp {
	        puts $O "$pre_cpp $file | & tee -a log"
		puts $O "mv $fileroot.o $object_files"
	    }
	    default {
	        puts "Error: undefined file extension $file"
	    }
 	}
    }
}
close $O

set O [open link.tcsh w]
puts $O "#!/bin/tcsh"
puts $O "setenv PATH /opt/centos/devtoolset-1.0/root/usr/bin/:\$PATH"
puts $O "g++ -L BerkeleyDB.6.0/lib/ -L /usr/bin/lib -lm -ltcl8.5  -ldl  -ldb-4.7  $object_files/*.o -o $target_name | & tee -a log"
close $O
if {![file exists $object_files]} {
    file mkdir $object_files
}
exec chmod +x ./compile.tcsh
exec chmod +x ./link.tcsh

puts "Info: Compiling [c]"
exec ./compile.tcsh
puts "Info: Linking [c]"
exec ./link.tcsh
file delete compile.tcsh
file delete link.tcsh

